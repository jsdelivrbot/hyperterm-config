{"version":3,"sources":["../../src/lib/getGitConfig.js"],"names":["config","process","env","HYPER_SYNC_SETTINGS_PERSONAL_ACCESS_TOKEN","HYPER_SYNC_SETTINGS_GIST_ID","require","files","err","console","error","copySync","configTemplate","personalAccessToken","gistId","remoteUrl","repoPromise","ensureDirAsync","dirs","repo","clone","resolve","url"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA,IAAIA,SAAS,EAAb;;mBAKIC,QAAQC,G;IAFVC,yC,gBAAAA,yC;IACAC,2B,gBAAAA,2B;;;AAGF,IACE,CAACD,yCAAD,IACA,CAACC,2BAFH,EAGE;AACA,MAAI;AACFJ,aAASK,QAAQ,iBAAMC,KAAN,CAAYN,MAApB,CAAT,CADE,CACoC;AACvC,GAFD,CAEE,OAAOO,GAAP,EAAY;AACZC,YAAQC,KAAR,EAAe;AAAf,0EAEI,iBAAMH,KAAN,CAAYN,MAFhB;AAKA,iBAAGU,QAAH,CAAY,iBAAMJ,KAAN,CAAYK,cAAxB,EAAwC,iBAAML,KAAN,CAAYN,MAApD;AACD;AACF;;AAED,IAAIG,yCAAJ,EAA+C;AAC7CH,SAAOY,mBAAP,GAA6BT,yCAA7B;AACD;;AAED,IAAIC,2BAAJ,EAAiC;AAC/BJ,SAAOa,MAAP,GAAgBT,2BAAhB;AACD;;kBAEc,YAAM;AAAA,gBACqBJ,MADrB;AAAA,MACXY,mBADW,WACXA,mBADW;AAAA,MACUC,MADV,WACUA,MADV;;;AAGnB,MAAI,CAACD,mBAAD,IAAwB,CAACC,MAA7B,EAAqC,OAAOb,MAAP;;AAErC,MAAMc,YAAY,wBAAQD,MAAR,EAAgBD,mBAAhB,CAAlB;;AAEA,MAAMG,cAAc,2DAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACQ,aAAGC,cAAH,CAAkB,iBAAMC,IAAN,CAAWC,IAA7B,CADR;;AAAA;AAAA,6CAES,sBACL,mBAAW;AACT,uCAAU,iBAAMD,IAAN,CAAWC,IAArB,EAA2BC,KAA3B,CACEL,SADF,EAEE,iBAAMG,IAAN,CAAWC,IAFb,EAGE,UAACT,KAAD,EAAW;AACTW;AACA,oBAAIX,KAAJ,EAAWD,QAAQC,KAAR,+BAA+BA,KAA/B,EAFF,CAE2C;AACrD,eANH;AAQD,aAVI,CAFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADkB,IAApB;;AAkBA,oCACKT,MADL;AAEEqB,SAAK,wBAAQR,MAAR,CAFP;AAGEC,wBAHF;AAIEC;AAJF;AAMD,C","file":"getGitConfig.js","sourcesContent":["import simpleGit from 'simple-git';\nimport fs from './fs';\nimport { paths, gistUrl, errorTitle } from '../constants';\n\nlet config = {};\n\nconst {\n  HYPER_SYNC_SETTINGS_PERSONAL_ACCESS_TOKEN,\n  HYPER_SYNC_SETTINGS_GIST_ID,\n} = process.env;\n\nif (\n  !HYPER_SYNC_SETTINGS_PERSONAL_ACCESS_TOKEN ||\n  !HYPER_SYNC_SETTINGS_GIST_ID\n) {\n  try {\n    config = require(paths.files.config); // eslint-disable-line import/no-dynamic-require, global-require, max-len\n  } catch (err) {\n    console.error( // eslint-disable-line no-console\n      `hyper-sync-settings: error ðŸ”¥ no config file found in \\`${\n        paths.files.config\n      }\\`, creating one`,\n    );\n    fs.copySync(paths.files.configTemplate, paths.files.config);\n  }\n}\n\nif (HYPER_SYNC_SETTINGS_PERSONAL_ACCESS_TOKEN) {\n  config.personalAccessToken = HYPER_SYNC_SETTINGS_PERSONAL_ACCESS_TOKEN;\n}\n\nif (HYPER_SYNC_SETTINGS_GIST_ID) {\n  config.gistId = HYPER_SYNC_SETTINGS_GIST_ID;\n}\n\nexport default () => {\n  const { personalAccessToken, gistId } = config;\n\n  if (!personalAccessToken || !gistId) return config;\n\n  const remoteUrl = gistUrl(gistId, personalAccessToken);\n\n  const repoPromise = (\n    async () => {\n      await fs.ensureDirAsync(paths.dirs.repo);\n      return new Promise(\n        resolve => {\n          simpleGit(paths.dirs.repo).clone(\n            remoteUrl,\n            paths.dirs.repo,\n            (error) => {\n              resolve();\n              if (error) console.error(`${errorTitle} ${error}`); // eslint-disable-line no-console\n            },\n          );\n        },\n      );\n    }\n  )();\n\n  return {\n    ...config,\n    url: gistUrl(gistId),\n    remoteUrl,\n    repoPromise,\n  };\n};\n"]}